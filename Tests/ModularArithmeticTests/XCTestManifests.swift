#if !canImport(ObjectiveC)
import XCTest

extension AddTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AddTests = [
        ("testExhaustiveInt8", testExhaustiveInt8),
        ("testExhaustiveUInt8", testExhaustiveUInt8),
    ]
}

extension ExpTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ExpTests = [
        ("testEdgeInt8", testEdgeInt8),
        ("testEdgeUInt8", testEdgeUInt8),
        ("testSelectInt8", testSelectInt8),
        ("testSelectUInt8", testSelectUInt8),
    ]
}

extension InvTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__InvTests = [
        ("testExhaustiveInt8", testExhaustiveInt8),
        ("testExhaustiveUInt8", testExhaustiveUInt8),
    ]
}

extension ModTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ModTests = [
        ("testExhaustiveInt8", testExhaustiveInt8),
        ("testExhaustiveUInt8", testExhaustiveUInt8),
    ]
}

extension MulTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MulTests = [
        ("testExhaustiveInt8", testExhaustiveInt8),
        ("testExhaustiveUInt8", testExhaustiveUInt8),
    ]
}

extension SubTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SubTests = [
        ("testExhaustiveInt8", testExhaustiveInt8),
        ("testExhaustiveUInt8", testExhaustiveUInt8),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(AddTests.__allTests__AddTests),
        testCase(ExpTests.__allTests__ExpTests),
        testCase(InvTests.__allTests__InvTests),
        testCase(ModTests.__allTests__ModTests),
        testCase(MulTests.__allTests__MulTests),
        testCase(SubTests.__allTests__SubTests),
    ]
}
#endif
